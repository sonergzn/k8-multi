version: 2.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
environment:
  BUILD_ID: "$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)"
  CLOUDSDK_CORE_DISABLE_PROMPTS: '1'
jobs:
  BeforeInstallAndRunTests:
    machine: #Runner Type, it can be docker, machine ...
      image: ubuntu-2004:202010-01
      docker_layer_caching: true #Gives the docker environment too (It cache the image layers).
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "install & authenticate google cloud sdk"
          command: |
            sudo apt-get update & sudo apt-get install -y curl
            export CLOUD_SDK_REPO="cloud-sdk-(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list"
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            sudo gcloud --quiet components update 
            sudo gcloud --quiet components update kubectl
            echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GCLOUD_COMPUTE_ZONE}
            gcloud container clusters get-credentials ${GCLOUD_CLUSTER_NAME} 
            gcloud projects list --sort-by=projectId --limit=5

      - run:
          name: Docker Login and Build client for tests
          command: | 
            echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
            docker build -t sonergezgen/client -f ./client/Dockerfile.dev ./client 

      - run:
          name: Run Tests
          command: |
            docker run sonergezgen/client timeout 30 npm test -- --coverage
            #CI=true npm test --watch=all should be set in ./client/package.json. Otherwise CI will never exit

      - run:
          name: export the build ID from circleCI to tag and build our images
          command: |
            #export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
            echo ${BUILD_ID}
            docker build -t sonergezgen/multi-client:${BUILD_ID} -f ./client/Dockerfile ./client
            docker build -t sonergezgen/multi-server:${BUILD_ID} -f ./server/Dockerfile ./server
            docker build -t sonergezgen/multi-worker:${BUILD_ID} -f ./worker/Dockerfile ./worker
            
            docker build -t sonergezgen/multi-client:${BUILD_ID} -t sonergezgen/multi-client:latest -f ./client/Dockerfile ./client
            docker build -t sonergezgen/multi-server:${BUILD_ID} -t sonergezgen/multi-server:latest -f ./server/Dockerfile ./server
            docker build -t sonergezgen/multi-worker:${BUILD_ID} -t sonergezgen/multi-worker:latest -f ./worker/Dockerfile ./worker

      - run:
          name: Docker Push new Image build with tags.
          command: |
            #export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
            #export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
            docker push sonergezgen/multi-client:latest
            docker push sonergezgen/multi-server:latest
            docker push sonergezgen/multi-worker:latest

            docker push sonergezgen/multi-client:${BUILD_ID}
            docker push sonergezgen/multi-server:${BUILD_ID}
            docker push sonergezgen/multi-worker:${BUILD_ID}

      #- run:
      #    name: Deployment for Kubernetes
      #    command: |
      #      #export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
      #      kubectl apply -f k8_files
      #      kubectl set image deployments/client-deployment client=sonergezgen/multi-client:${BUILD_ID}
      #      kubectl set image deployments/server-deployment server=sonergezgen/multi-server:${BUILD_ID}
      #      kubectl set image deployments/worker-deployment worker=sonergezgen/multi-worker:${BUILD_ID}



# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  before_install_job:
    jobs:
      - BeforeInstallAndRunTests:
          filters:
            branches:
              only: main
