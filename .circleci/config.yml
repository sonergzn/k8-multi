version: 2.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
#environment:
#  BUILD_ID: "$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)"
#  CLOUDSDK_CORE_DISABLE_PROMPTS: '1'
jobs:
  Run_Tests_before:
    machine: #Runner Type, it can be docker, machine ...
      image: ubuntu-2004:202010-01
      docker_layer_caching: true #Gives the docker environment too (It cache the image layers).
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Run Tests
          command: |
              echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
              docker build -t sonergezgen/client -f ./client/Dockerfile.dev ./client
              docker run sonergezgen/client timeout 30 npm test -- --coverage

  Build-test-push-deploy:
    machine: #Runner Type, it can be docker, machine ...
      image: ubuntu-2004:202010-01
      docker_layer_caching: true #Gives the docker environment too (It cache the image layers).
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "install & authenticate google cloud sdk"
          command: |
            if command -v gcloud &> /dev/null
            then
              echo "Google Cloud SDK is installed"
              sudo gcloud --quiet components update kubectl
              echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
              gcloud config set project ${GOOGLE_PROJECT_ID}
              gcloud config set compute/zone ${GCLOUD_COMPUTE_ZONE}
              gcloud container clusters get-credentials ${GCLOUD_CLUSTER_NAME} 
              gcloud projects list --sort-by=projectId --limit=5
            else
              echo "Google Cloud SDK is not installed"
              sudo apt-get update & sudo apt-get install -y curl
              echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
              export CLOUD_SDK_REPO="cloud-sdk-(lsb_release -c -s)"
              echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list"
              curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

              sudo apt-get update && sudo apt-get install -y google-cloud-sdk
              sudo gcloud --quiet components update 
              sudo gcloud --quiet components update kubectl
              echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
              gcloud config set project ${GOOGLE_PROJECT_ID}
              gcloud config set compute/zone ${GCLOUD_COMPUTE_ZONE}
              gcloud container clusters get-credentials ${GCLOUD_CLUSTER_NAME} 
              gcloud projects list --sort-by=projectId --limit=5
            fi
      - run:
          name: Docker Login and Build client for tests
          command: | 
             echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
      #      docker build -t sonergezgen/client -f ./client/Dockerfile.dev ./client

      - run:
          name: export the build ID from circleCI to tag and build our images
          command: |
            export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
            echo ${BUILD_ID}
            docker build -t sonergezgen/multi-client:${BUILD_ID} -f ./client/Dockerfile ./client
            docker build -t sonergezgen/multi-server:${BUILD_ID} -f ./server/Dockerfile ./server
            docker build -t sonergezgen/multi-worker:${BUILD_ID} -f ./worker/Dockerfile ./worker

            docker build -t sonergezgen/multi-client:${BUILD_ID} -t sonergezgen/multi-client:latest -f ./client/Dockerfile ./client
            docker build -t sonergezgen/multi-server:${BUILD_ID} -t sonergezgen/multi-server:latest -f ./server/Dockerfile ./server
            docker build -t sonergezgen/multi-worker:${BUILD_ID} -t sonergezgen/multi-worker:latest -f ./worker/Dockerfile ./worker

      - run:
          name: Docker Push new Image build with tags.
          command: |
            export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
            docker push sonergezgen/multi-client:latest
            docker push sonergezgen/multi-server:latest
            docker push sonergezgen/multi-worker:latest

            docker push sonergezgen/multi-client:${BUILD_ID}
            docker push sonergezgen/multi-server:${BUILD_ID}
            docker push sonergezgen/multi-worker:${BUILD_ID}

      - run:
          name: Kustomize Deployment for Kubernetes
          command: |
            

            if command -v kustomize &> /dev/null
            then
              export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
              echo "Kustomize is already installed."
              kustomize version

              #sed -i "s/\$(TAG)/${BUILD_ID}/g" environments/PROD/multi-k8/kustomization.yaml
              cd environments/PROD/multi-k8
              kustomize edit set image client=sonergezgen/multi-client:${BUILD_ID}
              kustomize edit set image server=sonergezgen/multi-server:${BUILD_ID}
              kustomize edit set image worker=sonergezgen/multi-worker:${BUILD_ID}
              cd ../../../
              kubectl apply -k environments/PROD/multi-k8
              #cd environments/PROD/multi-k8
            else
              export BUILD_ID=$(echo ${CIRCLE_BUILD_URL} | cut -d'/' -f 7)
              wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.8.5/kustomize_v3.8.5_linux_amd64.tar.gz
              tar zxf kustomize_v3.8.5_linux_amd64.tar.gz 
              sudo mv  kustomize /usr/local/bin

              #sed -i "s/\$(TAG)/${BUILD_ID}/g" environments/PROD/multi-k8/kustomization.yaml
              cd environments/PROD/multi-k8
              kustomize edit set image client=sonergezgen/multi-client:${BUILD_ID}
              kustomize edit set image server=sonergezgen/multi-server:${BUILD_ID}
              kustomize edit set image worker=sonergezgen/multi-worker:${BUILD_ID}
              cd ../../../
              kubectl apply -k environments/PROD/multi-k8
              #cd environments/PROD/multi-k8
            fi

            #sed -i "s/\$(TAG)/${BUILD_ID}/g" environments/PROD/multi-k8/kustomization.yaml
            #cat environments/PROD/multi-k8/kustomization.yaml

            #find k8_files -type f -exec sed -i "s/\$(TAG)/${BUILD_ID}/g" {} \;
            #cat k8_files/client-deployment.yaml
            #cat k8_files/server-deployment.yaml
            #cat k8_files/worker-deployment.yaml

            #kubectl rollout restart deployment/client-deployment -n default
            #kubectl rollout restart deployment/server-deployment -n default
            #kubectl rollout restart deployment/worker-deployment -n default

            #kubectl apply -f k8_files
            #kubectl set image deployments/client-deployment client=sonergezgen/multi-client:${BUILD_ID}
            #kubectl set image deployments/server-deployment server=sonergezgen/multi-server:${BUILD_ID}
            #kubectl set image deployments/worker-deployment worker=sonergezgen/multi-worker:${BUILD_ID}

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  Whole_CICD_K8:
    jobs:
      - Run_Tests_before
      - Build-test-push-deploy:
          requires:
            - Run_Tests_before
          filters:
            branches:
              only:
                - main

              

